variables:
  POSTGRES_HOST_AUTH_METHOD: trust
  CARGO_HOME: $CI_PROJECT_DIR/.cargo

image: "harbor.hendrikx-itc.nl/1optic/rust-ci:1.86.0@sha256:5c3eb6f264fe52a95157feda45d4ed7a11170f7d06962339e39cd5526c0a02ce"

default:
  # cancel the job if a newer pipeline starts for the same MR or branch
  interruptible: true
  cache:
    # use the git branch or tag as cache key, so the cache will be
    # shared among CI runs for the same branch or tag
    key: ${CI_COMMIT_REF_SLUG}
    # we cache .cargo/ and target/, which effectively enables
    # incremental builds across different executions of the CI
    # for the same branch or the same merge request
    paths:
      - .cargo
      - target

stages:
  - lint
  - test
  - build
  - publish

lint:
  stage: lint
  script:
    - cargo fmt --check
    - RUSTFLAGS="-Dwarnings" cargo clippy --all-targets --all-features

# Use cargo to test the project
test-cortex-dispatcher:cargo:
  stage: test
  tags:
    - testcontainers
  before_script:
    - rustup default nightly
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo build --bin cortex-dispatcher
    - cargo test --verbose -- --format=json  -Z unstable-options --report-time | cargo2junit > results.xml
  artifacts:
    when: always
    reports:
      junit: results.xml

build-service-image:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:debug@sha256:c3109d5926a997b100c4343944e06c6b30a6804b2f9abe0994d3de6ef92b028e
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${DOCKER_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${DOCKER_REGISTRY_USER}" "${DOCKER_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${DOCKER_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG
