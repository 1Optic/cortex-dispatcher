

CREATE SCHEMA IF NOT EXISTS "dispatcher";


CREATE TYPE "dispatcher"."version_tuple" AS (
  "major" smallint,
  "minor" smallint,
  "patch" smallint
);



CREATE FUNCTION "dispatcher"."version"()
    RETURNS system.version_tuple
AS $$
SELECT (1,0,0)::system.version_tuple;
$$ LANGUAGE sql IMMUTABLE;


CREATE TABLE "dispatcher"."file"
(
  "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "created" timestamptz NOT NULL DEFAULT now(),
  "source" text NOT NULL,
  "path" text NOT NULL,
  "size" bigint NOT NULL,
  "hash" text
);

COMMENT ON TABLE "dispatcher"."file" IS 'All files in the internal storage area of Cortex are registered here.';

CREATE INDEX "sftp_download_file_index" ON "dispatcher"."file" USING btree (source, path);



CREATE TABLE "dispatcher"."sftp_download"
(
  "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
  "created" timestamptz NOT NULL DEFAULT now(),
  "source" text NOT NULL,
  "path" text NOT NULL,
  "size" bigint,
  "file_id" bigint
);

CREATE INDEX "sftp_download_file_index" ON "dispatcher"."sftp_download" USING btree (source, path);



CREATE TABLE "dispatcher"."dispatched"
(
  "file_id" bigint NOT NULL,
  "target" text NOT NULL,
  "timestamp" timestamptz NOT NULL DEFAULT now()
);



ALTER TABLE "dispatcher"."sftp_download"
  ADD CONSTRAINT "sftp_download_file_id_fkey"
  FOREIGN KEY (file_id)
  REFERENCES "dispatcher"."file" (id) ON DELETE CASCADE;

ALTER TABLE "dispatcher"."dispatched"
  ADD CONSTRAINT "dispatched_file_id_fkey"
  FOREIGN KEY (file_id)
  REFERENCES "dispatcher"."file" (id) ON DELETE CASCADE;
